name: Installer ISO
on: 
  workflow_call:
    inputs:
      fedora_version:
        description: "The Fedora release version: 39, 40, 41 etc"
        type: string
        required: true

jobs:
  build_iso:
    name: Build Installer ISO
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        hyprland_build:
          - fedora
          - solopasha
          - git
    env:
      ARCH: "x86_64"
      IMAGE_NAME: ${{ github.event.repository.name }}-${{ matrix.hyprland_build }}
      IMAGE_REPO: "ghcr.io/cjuniorfox"
      IMAGE_TAG: ${{ matrix.fedora_version }}
      VARIANT: "base-main"
      VERSION: ${{ matrix.fedora_version }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      S3_BUCKET: juniorfox-net-isos
      AWS_REGION: sa-east-1
      iso_name:
      checksum:
      iso_upload_dir:

    steps:
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Build ISO
        uses: jasonn3/build-container-installer@v1.2.2
        if: false
        id: build_iso
        with:
          arch: ${{ env.ARCH }}
          image_name: ${{ env.IMAGE_NAME }}
          image_repo: ${{ env.IMAGE_REPO }}
          image_tag: ${{ env.IMAGE_TAG }}
          version: ${{ env.VERSION }}
          variant: ${{ env.VARIANT }}
          iso_name: ${{ env.IMAGE_NAME }}-${{ env.ARCH }}-${{ env.IMAGE_TAG }}.iso
          secure_boot_key_url: 'https://github.com/ublue-os/akmods/raw/main/certs/public_key.der'
          enrollment_password: 'ublue-os'
          enable_cache_dnf: "false"
          enable_cache_skopeo: "false"
          flatpak_remote_refs: "org.gnome.Calculator"

      - name: Get ISO names
        id: iso_names
        if: false
        run: |
          echo "iso_name=${{ steps.build_iso.outputs.iso_name }}" >> $GITHUB_ENV
          echo "checksum=${{ steps.build_iso.outputs.iso_name }}-CHECKSUM" >> $GITHUB_ENV
          echo "iso_upload_dir=${{ github.workspace }}/upload" >> $GITHUB_ENV

      - name: Move ISOs to Upload Directory
        if: false
        run: |
          mkdir -p ${{ env.iso_upload_dir }}
          mv ${{ steps.build_iso.outputs.iso_path }}/${{ env.iso_name }} ${{ env.iso_upload_dir }}
          mv ${{ steps.build_iso.outputs.iso_path }}/${{ env.checksum }} ${{ env.iso_upload_dir }}

      - name: Upload ISO as artifact
        if: false
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.iso_name }}
          path: ${{ env.iso_upload_dir }}

      - name: Upload ISO to S3
        if: false
        run: |
          aws s3 cp "${{ env.iso_upload_dir }}/${{ env.iso_name }}" "s3://${{ env.S3_BUCKET }}/${{ env.iso_name }}"
          aws s3 cp "${{ env.iso_upload_dir }}/${{ env.checksum }}" "s3://${{ env.S3_BUCKET }}/${{ env.checksum }}"

      - name: Make ISO public
        if: false
        run: |
          aws s3api put-object-acl --bucket ${{ env.S3_BUCKET }} --key "${{ env.iso_name }}" --acl public-read
          aws s3api put-object-acl --bucket ${{ env.S3_BUCKET }} --key "${{ env.checksum }}" --acl public-read

      - name: Output ISO URL
        if: false
        run: |
          echo "ISO URL: https://${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${{ env.iso_name }}"
      
      - name: Authenticate to ISO Server
        id: auth_iso_server
        env:
          UPLOAD_SERVER: ${{ secrets.UPLOAD_SERVER }}
          PUBLIC_KEY_JSON: ${{ secrets.PUBLIC_KEY_JSON }}
        run: |
          curl -X POST "https://${UPLOAD_SERVER}/token" -H 'Content-Type: application/json' -d "${PUBLIC_KEY_JSON}"
          token=$(curl -X POST "https://${UPLOAD_SERVER}/token" -H 'Content-Type: application/json' -d "${PUBLIC_KEY_JSON}" | jq -r .access_token)
          echo "TOKEN=$token" >> $GITHUB_ENV

      - name: Upload ISO to_Server
        id: upload_iso_to_server
        env:
          TOKEN: ${{ env.TOKEN }}
          UPLOAD_SERVER: ${{ secrets.UPLOAD_SERVER }}
        run: |
          curl -X POST -F "file=@${{ env.iso_upload_dir }}/${{ env.iso_name }}" -H "Authorization: Bearer $TOKEN" "${UPLOAD_SERVER}/upload"
          curl -X POST -F "file=@${{ env.iso_upload_dir }}/${{ env.checksum }}" -H "Authorization: Bearer $TOKEN" "${UPLOAD_SERVER}/upload"
