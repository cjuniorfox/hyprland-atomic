name: Installer ISO
on: 
  workflow_call:
    inputs:
      fedora_version:
        description: "The Fedora release version: 39, 40, 41 etc"
        type: string
        required: true

jobs:
  build_iso:
    name: Build Installer ISO
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        hyprland_build:
          - fedora
          - solopasha
          - solopasha-virt
          #- git
    env:
      ARCH: "x86_64"
      FLATPAK_REFS_DIR: "installer/hyprland"
      IMAGE_NAME: ${{ github.event.repository.name }}-${{ matrix.hyprland_build }}
      IMAGE_REPO: "ghcr.io/cjuniorfox"
      IMAGE_TAG: ${{ matrix.fedora_version }}
      VARIANT: "base-main"
      VERSION: ${{ matrix.fedora_version }}
      AWS_REGION: sa-east-1
      iso_name:
      checksum:
      iso_upload_dir:

    steps:
      - name: Checkout Push to Registry action
        uses: actions/checkout@v5

      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/flatpak
            ~/.cache/dnf
          key: ${{ runner.os }}-flatpak-dnf-cache
      
      # From ublue/bazzite: https://github.com/ublue-os/bazzite/blob/unstable-42.20250620.1/.github/workflows/build_iso.yml
      - name: Determine Flatpak Dependencies
        id: flatpak_dependencies
        shell: bash
        run: |
          set -ex
          image="${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          # Make temp space
          TEMP_FLATPAK_INSTALL_DIR=$(mktemp -d -p ${{ github.workspace }} flatpak.XXX)
          # Get list of refs from directory
          FLATPAK_REFS_DIR=${{ github.workspace }}/${{env.FLATPAK_REFS_DIR}}
          FLATPAK_REFS_DIR_LIST=$(cat ${FLATPAK_REFS_DIR}/* | tr '\n' ' ' )
          # Generate install script
          cat << EOF > ${TEMP_FLATPAK_INSTALL_DIR}/script.sh
          cat /temp_flatpak_install_dir/script.sh
          mkdir -p /flatpak/flatpak /flatpak/triggers
          mkdir /var/tmp || true
          chmod -R 1777 /var/tmp
          flatpak config --system --set languages "*"
          flatpak remote-add --system flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install --system -y ${FLATPAK_REFS_DIR_LIST}
          ostree refs --repo=\${FLATPAK_SYSTEM_DIR}/repo | grep '^deploy/' | grep -v 'org\.freedesktop\.Platform\.openh264' | sed 's/^deploy\///g' > /output/flatpaks_with_deps
          EOF
          docker run --rm --privileged \
            --entrypoint bash \
            -e FLATPAK_SYSTEM_DIR=/flatpak/flatpak \
            -e FLATPAK_TRIGGERSDIR=/flatpak/triggers \
            --volume ${FLATPAK_REFS_DIR}:/output \
            --volume ${TEMP_FLATPAK_INSTALL_DIR}:/temp_flatpak_install_dir \
            ${image} /temp_flatpak_install_dir/script.sh
          docker rmi ${image}
      
      - name: List Flatpak packages with dependencies
        id: read_flatpak_packages
        shell: bash
        run: |
          for i in ${{ github.workspace }}/${{env.FLATPAK_REFS_DIR}}/*; do
            echo -e "\n$i\n------";
            cat $i;
          done;

      - name: Build ISO
        uses: jasonn3/build-container-installer@v1.3.0
        id: build_iso
        with:
          arch: ${{ env.ARCH }}
          image_name: ${{ env.IMAGE_NAME }}
          image_repo: ${{ env.IMAGE_REPO }}
          image_tag: ${{ env.IMAGE_TAG }}
          version: ${{ env.VERSION }}
          variant: ${{ env.VARIANT }}
          iso_name: ${{ env.IMAGE_NAME }}-${{ env.ARCH }}-${{ env.IMAGE_TAG }}.iso
          secure_boot_key_url: 'https://github.com/ublue-os/akmods/raw/main/certs/public_key.der'
          enrollment_password: 'ublue-os'
          enable_cache_dnf: "false"
          enable_cache_skopeo: "false"
          flatpak_remote_refs_dir: ${{env.FLATPAK_REFS_DIR}}
          enable_flatpak_dependencies: "false"

      - name: Get ISO names
        id: iso_names
        run: |
          echo "iso_name=${{ steps.build_iso.outputs.iso_name }}" >> $GITHUB_ENV
          echo "checksum=${{ steps.build_iso.outputs.iso_name }}-CHECKSUM" >> $GITHUB_ENV
          echo "iso_upload_dir=${{ github.workspace }}/upload" >> $GITHUB_ENV

      - name: Move ISOs to Upload Directory
        run: |
          mkdir -p ${{ env.iso_upload_dir }}
          mv ${{ steps.build_iso.outputs.iso_path }}/${{ env.iso_name }} ${{ env.iso_upload_dir }}
          mv ${{ steps.build_iso.outputs.iso_path }}/${{ env.checksum }} ${{ env.iso_upload_dir }}

      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.iso_name }}
          path: ${{ env.iso_upload_dir }}

      - name: Upload ISOs and Checksum to R2
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          SOURCE_DIR: ${{ env.iso_upload_dir }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy $SOURCE_DIR R2:isos
