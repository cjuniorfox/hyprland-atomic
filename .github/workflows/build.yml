---
  name: build-ublue-hyprland
  on:
    pull_request:
      branches:
        - main
    schedule:
      - cron: '05 10 * * *'  # 10:05am UTC everyday
    push:
      branches:
        - main
        - develop
      paths-ignore:
        - '**/README.md'
    workflow_dispatch:
  
  env:
    BASE_IMAGE_NAME: "${{ github.event.repository.name }}-base"
    BASE_IMAGE_DESC: "Hyprland Shell Blue Image with Fedora Hyprland"
    GIT_IMAGE_NAME: "${{ github.event.repository.name }}-git"
    GIT_IMAGE_DESC: "Hyprland Shell Blue Image with Git Hyprland"
    SOLOPASHA_IMAGE_NAME: "${{ github.event.repository.name }}-solopasha"
    SOLOPASHA_IMAGE_DESC: "Hyprland Shell Blue Image with Solopasha Hyprland"
    IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit
  
  jobs:
    build_push:
      name: Build and push image
      runs-on: ubuntu-latest
  
      permissions:
        contents: read
        packages: write
        id-token: write
  
      steps:
        # Checkout push-to-registry action GitHub repository
        - name: Checkout Push to Registry action
          uses: actions/checkout@v4
  
        - name: Generate tags
          id: generate-tags
          shell: bash
          run: |
            # Generate a timestamp for creating an image version history
            TIMESTAMP="$(date +%Y%m%d)"
            COMMIT_TAGS=()
            BUILD_TAGS=()
  
            # Have tags for tracking builds during pull request
            SHA_SHORT="${GITHUB_SHA::7}"
            COMMIT_TAGS+=("pr-${{ github.event.number }}")
            COMMIT_TAGS+=("${SHA_SHORT}")
  
            # Append matching timestamp tags to keep a version history
            for TAG in "${BUILD_TAGS[@]}"; do
                BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
            done
  
            BUILD_TAGS+=("${TIMESTAMP}")
            BUILD_TAGS+=("latest")
  
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                echo "Generated the following commit tags: "
                for TAG in "${COMMIT_TAGS[@]}"; do
                    echo "${TAG}"
                done
  
                alias_tags=("${COMMIT_TAGS[@]}")
            else
                alias_tags=("${BUILD_TAGS[@]}")
            fi
  
            echo "Generated the following build tags: "
            for TAG in "${BUILD_TAGS[@]}"; do
                echo "${TAG}"
            done
  
            echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
  
        # Build metadata
        - name: Image Metadata
          uses: docker/metadata-action@v5
          id: meta
          with:
            images: |
              ${{ env.BASE_IMAGE_NAME }}
              ${{ env.GIT_IMAGE_NAME }}
              ${{ env.SOLOPASHA_IMAGE_NAME }}
  
            labels: |
              # Base Image Metadata
              io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
              org.opencontainers.image.description=${{ env.BASE_IMAGE_DESC }}
              org.opencontainers.image.title=${{ env.BASE_IMAGE_NAME }}
  
              # Git Image Metadata
              io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
              org.opencontainers.image.description=${{ env.GIT_IMAGE_DESC }}
              org.opencontainers.image.title=${{ env.GIT_IMAGE_NAME }}
  
              # Solopasha Image Metadata
              io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
              org.opencontainers.image.description=${{ env.SOLOPASHA_IMAGE_DESC }}
              org.opencontainers.image.title=${{ env.SOLOPASHA_IMAGE_NAME }}
        # Build image using Buildah action
        - name: Build Base Image
          id: build_base_image
          uses: redhat-actions/buildah-build@v2
          with:
            containerfiles: |
              ./Containerfile
            build-args : |
              HYPRLAND_BUILD=git
            image: ${{ env.BASE_IMAGE_NAME }}
            tags: |
              ${{ steps.generate-tags.outputs.alias_tags }}
            labels: ${{ steps.meta.outputs.labels }}
            oci: false
        - name: Build git Image
          id: build_git_image
          uses: redhat-actions/buildah-build@v2
          with:
            containerfiles: |
              ./Containerfile
            build-args : |
              HYPRLAND_BUILD=git
            image: ${{ env.GIT_IMAGE_NAME }}
            tags: |
              ${{ steps.generate-tags.outputs.alias_tags }}
            labels: ${{ steps.meta.outputs.labels }}
            oci: false
        - name: Build Solopasha Image
          id: build_solopasha_image
          uses: redhat-actions/buildah-build@v2
          with:
            containerfiles: |
              ./Containerfile
            build-args : |
              HYPRLAND_BUILD=solopasha
            image: ${{ env.SOLOPASHA_IMAGE_NAME }}
            tags: |
              ${{ steps.generate-tags.outputs.alias_tags }}
            labels: ${{ steps.meta.outputs.labels }}
            oci: false
  
        - name: Lowercase Registry
          id: registry_case
          uses: ASzc/change-string-case-action@v6
          with:
            string: ${{ env.IMAGE_REGISTRY }}
  
        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
  
        # Push Base Image
        - name: Push Base Image to GHCR
          uses: redhat-actions/push-to-registry@v2
          id: push_base_image
          env:
            REGISTRY_USER: ${{ github.actor }}
            REGISTRY_PASSWORD: ${{ github.token }}
          with:
            image: ${{ steps.build_base_image.outputs.image }}
            tags: ${{ steps.build_base_image.outputs.tags }}
            registry: ghcr.io
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust
  
        # Push Git Image
        - name: Push Git Image to GHCR
          uses: redhat-actions/push-to-registry@v2
          id: push_git_image
          env:
            REGISTRY_USER: ${{ github.actor }}
            REGISTRY_PASSWORD: ${{ github.token }}
          with:
            image: ${{ steps.build_git_image.outputs.image }}
            tags: ${{ steps.build_git_image.outputs.tags }}
            registry: ghcr.io
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust
  
        # Push Solopasha Image
        - name: Push Solopasha Image to GHCR
          uses: redhat-actions/push-to-registry@v2
          id: push_solopasha_image
          env:
            REGISTRY_USER: ${{ github.actor }}
            REGISTRY_PASSWORD: ${{ github.token }}
          with:
            image: ${{ steps.build_solopasha_image.outputs.image }}
            tags: ${{ steps.build_solopasha_image.outputs.tags }}
            registry: ghcr.io
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust
  
  
        # Sign container
        - uses: sigstore/cosign-installer@v3.5.0
          if: github.event_name != 'pull_request'
  
        - name: Sign container base image
          if: github.event_name != 'pull_request'
          run: |
            cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_base_image.outputs.image }}@${TAGS}
          env:
            TAGS: ${{ steps.push_base_image.outputs.digest }}
            COSIGN_EXPERIMENTAL: false
            COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
  
        - uses: sigstore/cosign-installer@v3.5.0
          if: github.event_name != 'pull_request'
  
        - name: Sign container git image
          if: github.event_name != 'pull_request'
          run: |
            cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_git_image.outputs.image }}@${TAGS}
          env:
            TAGS: ${{ steps.push_git_image.outputs.digest }}
            COSIGN_EXPERIMENTAL: false
            COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
  
        - uses: sigstore/cosign-installer@v3.5.0
          if: github.event_name != 'pull_request'
  
        - name: Sign container Solopasha image
          if: github.event_name != 'pull_request'
          run: |
            cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_solopasha_image.outputs.image }}@${TAGS}
          env:
            TAGS: ${{ steps.push_solopasha_image.outputs.digest }}
            COSIGN_EXPERIMENTAL: false
            COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
  
    build_iso:
      name: Build Installer ISO
      runs-on: ubuntu-latest
      needs: build_push
  
      env:
        ARCH: x86_64
        IMAGE_NAME: hyprland-atomic
        IMAGE_REPO: ghcr.io/cjuniorfox
        IMAGE_TAG: latest
        VARIANT: base-main
        VERSION: 40
      outputs:
        iso_name: ${{ steps.build.outputs.iso_name }}
        checksum: ${{ steps.build.outputs.iso_name }}-CHECKSUM
      steps:
        - name: Checkout Push to Registry action
          uses: actions/checkout@v4
  
        - name: Build ISO
          uses: jasonn3/build-container-installer@v1.2.0
          id: build
          with:
            arch: ${{ env.ARCH }}
            image_name: ${{ env.IMAGE_NAME }}
            image_repo: ${{ env.IMAGE_REPO }}
            image_tag: ${{ env.IMAGE_TAG }}
            version: ${{ env.VERSION }}
            variant: ${{ env.VARIANT }}
            iso_name: ${{ env.IMAGE_NAME }}-${{ env.ARCH }}-${{ env.VERSION }}-${{ env.IMAGE_TAG }}.iso
            secure_boot_key_url: 'https://github.com/ublue-os/akmods/raw/main/certs/public_key.der'
            enrollment_password: 'ublue-os'
            enable_cache_dnf: "false"
            enable_cache_skopeo: "false"
            flatpak_remote_refs: "com.github.tchx84.Flatseal org.gnome.Calculator org.gnome.Evince org.gnome.FileRoller org.gnome.FontManager org.gnome.Loupe org.gnome.TextEditor org.mozilla.firefox org.freedesktop.Platform.openh264/x86_64/2.3.1 org.freedesktop.Platform.ffmpeg-full/x86_64/22.08"
  
        - name: Move ISOs to Upload Directory
          id: upload-directory
          shell: bash
          run: |
            ISO_UPLOAD_DIR=${{ github.workspace }}/upload
            mkdir ${ISO_UPLOAD_DIR}
            mv ${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }} ${ISO_UPLOAD_DIR}
            mv ${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }}-CHECKSUM ${ISO_UPLOAD_DIR}
            echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> $GITHUB_OUTPUT
          
        # This example is for uploading your ISO as a Github artifact. You can do something similar using any cloud storage, so long as you copy the output
        - name: Upload ISO as artifact
          id: upload
          uses: actions/upload-artifact@v4
          with:
            name: ${{ steps.build.outputs.iso_name }}
            path: ${{ steps.upload-directory.outputs.iso-upload-dir }}
            if-no-files-found: error
            retention-days: 0
            compression-level: 0
            
    upload_iso_to_s3:
      name: Publish ISO Installer
      runs-on: ubuntu-latest
      needs: build_iso
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: juniorfox-net-isos
        AWS_REGION: sa-east-1
        ISO_NAME: ${{ needs.build_iso.outputs.iso_name }}
        CHECKSUM: ${{ needs.build_iso.outputs.checksum }}
      
      steps:
        - name: Download ISO Artifact
          uses: actions/download-artifact@v4
          with:
            name: ${{ env.ISO_NAME}}
            path: ./iso-output
        
        - name: Upload ISO to S3
          id: upload
          run: |
            echo "uploading ${{ env.ISO_NAME }}"
            aws s3 cp "./iso-output/${{ env.ISO_NAME }}" "s3://${{ env.S3_BUCKET }}/${{ env.ISO_NAME }}"
            aws s3 cp "./iso-output/${{ env.CHECKSUM }}" "s3://${{ env.S3_BUCKET }}/${{ env.CHECKSUM }}"
        
        - name: Make ISO public
          id: make_public
          run : |
            aws s3api put-object-acl --bucket ${{ env.S3_BUCKET }} --key "${{ env.ISO_NAME }}" --acl public-read
            aws s3api put-object-acl --bucket ${{ env.S3_BUCKET }} --key "${{ env.CHECKSUM }}" --acl public-read
        
        - name: Output ISO url
          id: upload_iso_url
          run : |
            echo "https://${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ISO_NAME }}"
            echo "https://${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${{ env.CHECKSUM }}"