name: build-ublue-hyprland

on:
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC every day
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  MY_IMAGE_NAME: "${{ github.event.repository.name }}"  # the name of the image produced by this build, matches repo names
  MY_IMAGE_DESC: "Hyprland Shell Blue Image"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          SHA_SHORT="${GITHUB_SHA::7}"
      
          BUILD_TAGS=("${TIMESTAMP}" "latest")
          COMMIT_TAGS=("pr-${{ github.event.number }}" "${SHA_SHORT}")
      
          echo "Generated the following build tags: ${BUILD_TAGS[@]}"
          echo "Generated the following commit tags: ${COMMIT_TAGS[@]}"
      
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
              echo "alias_tags=${COMMIT_TAGS[*]}" >> $GITHUB_OUTPUT
          else
              echo "alias_tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.MY_IMAGE_NAME }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ env.MY_IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.MY_IMAGE_NAME }}

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.MY_IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image to GHCR
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.generate-tags.outputs.alias_tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.5.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

  build_iso:
    name: Build Installer ISO
    runs-on: ubuntu-latest
    needs: build_push

    env:
      ARCH: x86_64
      IMAGE_NAME: hyprland-atomic
      IMAGE_REPO: ghcr.io/cjuniorfox
      IMAGE_TAG: latest
      VARIANT: default

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: build
        with:
          arch: ${{ env.ARCH }}
          image_name: ${{ env.IMAGE_NAME }}
          image_repo: ${{ env.IMAGE_REPO }}
          image_tag: ${{ env.IMAGE_TAG }}
          variant: ${{ env.VARIANT }}
          iso_name: ${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG }}.iso

      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.iso_name }}
          path: |
            ${{ steps.build.outputs.iso_path }}
            ${{ steps.build.outputs.iso_path }}-CHECKSUM
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
      - name: Upload ISO to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: sa-east-1  # Change this to your AWS region
          S3_BUCKET: juniorfox-net-isos
        run: |
          aws s3 cp ${{ steps.build.outputs.iso_path }} s3://${{ env.S3_BUCKET }}/
          aws s3 cp ${{ steps.build.outputs.iso_path }}-CHECKSUM s3://${{ env.S3_BUCKET }}/

      - name: Make ISO Public
        run: |
          aws s3api put-object-acl --bucket ${{ env.S3_BUCKET }} --key ${{ steps.build.outputs.iso_name }} --acl public-read
          aws s3api put-object-acl --bucket ${{ env.S3_BUCKET }} --key ${{ steps.build.outputs.iso_name }}-CHECKSUM --acl public-read

      - name: Output ISO URL
        run: |
          echo "ISO URL: https://${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${{ steps.build.outputs.iso_name }}"      
