---
name: "Build Image"
on: 
  workflow_call:
    inputs:
      fedora_version:
        type: string
        required: true
        description: "The Fedora release version: 39, 40, 41 etc"
    secrets:
        SIGNING_SECRET:
            required: true

jobs:
  build_ublue:
    name: Build and push Image
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        fedora_version:
          - ${{ inputs.fedora_version }}
        hyprland_build:
        - fedora
        - solopasha
        - solopasha-virt
    env:
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      IMAGE_NAME:
      HYPRLAND_BUILD:
      IMAGE_DESC:
      VIRTUALIZATION: no
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v5
      
      - name: Matrix Variables
        shell: bash
        run: |
          echo "HYPRLAND_BUILD=${{ matrix.hyprland_build }}" >> $GITHUB_ENV
          case "${{ matrix.hyprland_build }}" in 
            "fedora")
              echo "IMAGE_DESC='Hyprland Shell Blue Image Fedora'" >> $GITHUB_ENV
              ;;
            "solopasha")
              echo "IMAGE_DESC='Hyprland Shell Blue Image Solopasha'" >> $GITHUB_ENV
              ;;
            "solopasha-virt")
              echo "IMAGE_DESC='Hyprland Shell Blue Image Solopasha with Virtualization'" >> $GITHUB_ENV
              echo "HYPRLAND_BUILD=solopasha" >> $GITHUB_ENV
              echo "VIRTUALIZATION=yes" >> $GITHUB_ENV
              ;;
            "git")
              echo "IMAGE_DESC='Hyprland Shell Blue Image Git'" >> $GITHUB_ENV
              ;;
            *)
              echo "Error: Unsupported build type: ${{ matrix.hyprland_build }}" >&2
              exit 1
              ;;
          esac
          echo "IMAGE_NAME=${{ github.event.repository.name }}-${{ matrix.hyprland_build }}" >> $GITHUB_ENV
      
      - name: Maximize build space
        if: true
        uses: ublue-os/remove-unwanted-software@v9

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          GITHUB_EVENT_NAME=${{ github.event_name }}
          FEDORA_VERSION=${{ matrix.fedora_version }}
          BRANCH_NAME="${GITHUB_REF##*/}"
          case "${FEDORA_VERSION}" in
            40)
              IS_LATEST_VERSION=false
              IS_STABLE_VERSION=true
              IS_GTS_VERSION=true
              ;;
            41)
              IS_LATEST_VERSION=false
              IS_STABLE_VERSION=true
              IS_GTS_VERSION=true
              ;;
            42)
              IS_LATEST_VERSION=true
              IS_STABLE_VERSION=true
              IS_GTS_VERSION=false
              ;;
            *)
              echo "Error: Unsupported Fedora version: ${FEDORA_VERSION}" >&2
              exit 1
              ;;
          esac

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr--${FEDORA_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}-${FEDORA_VERSION}")

          if [[ "${IS_LATEST_VERSION}" == "true" ]] && \
             [[ "${IS_STABLE_VERSION}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${GITHUB_EVENT_NUMBER}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${FEDORA_VERSION}")

          # Append matching timestamp tags to keep a version history
          TEMP_TAGS=("${BUILD_TAGS[@]}")
          for TAG in "${TEMP_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${IS_LATEST_VERSION}" == "true" ]] && \
             [[ "${IS_STABLE_VERSION}" == "true" ]]; then
              BUILD_TAGS+=("${TIMESTAMP}")
              BUILD_TAGS+=("latest")
              echo "DEFAULT_TAG=latest" >> $GITHUB_ENV
          elif [[ "${IS_GTS_VERSION}" == "true" ]]; then
              BUILD_TAGS+=("gts-${TIMESTAMP}")
              BUILD_TAGS+=("gts")
              echo "DEFAULT_TAG=gts" >> $GITHUB_ENV
          fi

          # If the branch is not main, add the branch name to the tags
          if [[ "${BRANCH_NAME}" != "main" ]]; then
              TMP_BUILD_TAGS=()
              for TAG in ${BUILD_TAGS[@]}; do
                  if [[ "${TAG}" != *"latest"* ]] && \
                     [[ "${TAG}" != *"gts"* ]]; then
                      TMP_BUILD_TAGS+=("${TAG}-${BRANCH_NAME}")
                  fi
              done
              TMP_BUILD_TAGS+=("${BRANCH_NAME}")
              echo "DEFAULT_TAG=${BRANCH_NAME}" >> $GITHUB_ENV
              BUILD_TAGS=("${TMP_BUILD_TAGS[@]}")
          fi

          alias_tags=("${BUILD_TAGS[@]}")
          
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT


      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}  
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}  

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
          build-args: |
            HYPRLAND_BUILD=${{env.HYPRLAND_BUILD}}
            VIRTUALIZATION=${{env.VIRTUALIZATION}}
            SOURCE_TAG=${{ matrix.fedora_version }}

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}  

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  

      - name: Push Image to GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust  

      # Sign container
      - uses: sigstore/cosign-installer@v3.10.0
        if: github.event_name != 'pull_request'  

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
